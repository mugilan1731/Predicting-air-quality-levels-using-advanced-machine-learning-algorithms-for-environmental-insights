import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import m
# Sample Air Quality Data (replace with your actual data)
data = {
    'temperature': [25, 28, 22, 26, 30, 24, 27, 29, 23, 25],
    'humidity': [60, 65, 70, 55, 75, 62, 68, 72, 58, 63],
    'wind_speed': [5, 8, 3, 6, 10, 4, 7, 9, 2, 5],
    'air_quality': [50, 60, 40, 55, 70, 45, 58, 68, 35, 52]  # Target variable
}

df = pd.DataFrame(data)

# Data Preprocessing (if needed, handle missing values, outliers, etc.)


# Feature Engineering (create new features if necessary)

# Split data into training and testing sets
X = df[['temperature', 'humidity', 'wind_speed']]
y = df['air_quality']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Model Selection and Training (RandomForestRegressor as an example)
model = RandomForestRegressor(n_estimators=100, random_state=42)  # Adjust hyperparameters as needed
model.fit(X_train, y_train)

# Make Predictions
y_pred = model.predict(X_test)

# Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")


# Visualize Results
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')  # Diagonal line
plt.xlabel("Actual Air Quality")
plt.ylabel("Predicted Air Quality")
plt.title("Actual vs. Predicted Air Quality")
plt.show()

# Feature Importance (if needed)
feature_importance = model.feature_importances_
plt.figure(figsize=(8, 6))
sns.barplot(x=feature_importance, y=X.columns)
plt.xlabel("Feature Importance")
plt.ylabel("Features")
plt.title("Feature Importance in Air Quality Prediction")
plt.show()
ean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

